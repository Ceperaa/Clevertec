plugins {
    id 'groovy'
    id 'java'
    id 'war'
}

group 'ru.clevertec'
version '1.0'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

war {
    enabled true
}

ext.versions = [
        'spring'    : '5.3.22',
        'postgresql': '42.4.0',
        'liquibase' : '4.3.5',
        'snakeYaml' : '1.30',
        'yaml'      : '2.13.3',
        'gson'      : '2.9.0',
        'databind'  : '2.13.3',
        'slf4j'     : '1.7.36',
        'log4j'     : '2.18.0',
        'javaEE'    : '8.0.1',
        'lombok'    : '1.18.24',
        'junit'     : '5.8.2',
        'mockito'   : '4.7.0',
        'itext7'    : '7.2.1',
]

dependencies {
    implementation "org.springframework:spring-jdbc:${versions.spring}"
    implementation "org.springframework:spring-core:${versions.spring}"
    implementation "org.springframework:spring-context:${versions.spring}"
    implementation "org.springframework:spring-tx:${versions.spring}"
    implementation "org.springframework:spring-orm:${versions.spring}"
    implementation "org.springframework.data:spring-data-jpa:2.6.1"

    implementation "org.hibernate:hibernate-core:5.6.1.Final"
    implementation "com.google.code.gson:gson:${versions.gson}"

    compileOnly "javax:javaee-api:${versions.javaEE}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.databind}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.yaml}"

    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"

    implementation "org.modelmapper:modelmapper:3.1.0"

    testCompile "junit:junit:4.13.2"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testImplementation "org.mockito:mockito-all:1.10.19"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testCompileOnly "org.projectlombok:lombok:${versions.lombok}"

    implementation "org.postgresql:postgresql:${versions.postgresql}"

    implementation "com.itextpdf:itext7-core:${versions.itext7}"
    implementation "org.liquibase:liquibase-core:${versions.liquibase}"
    compile "org.codehaus.groovy:groovy-all:2.3.11"
}

dependencies {
    implementation 'org.springframework:spring-jdbc:5.3.22'
    implementation 'org.springframework:spring-core:5.3.22'
    implementation 'org.springframework:spring-context:5.3.22'

    compileOnly 'javax:javaee-api:8.0.1'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.18.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'

    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.4.0'

    implementation 'com.itextpdf:itext7-core:7.2.1'
    implementation 'org.liquibase:liquibase-core:4.3.5'
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
}

test {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces false
    }
}

class DownLoader extends DefaultTask {
    @Input
    String sourceUrl
    @OutputFile
    File target

    @TaskAction
    void download() {
        try {
            ant.get(src: sourceUrl, dest: target)
        } catch (Exception e) {
            print e
        }
    }
}

task download(type: DownLoader) {
    sourceUrl = "https://raw.githubusercontent.com/Ceperaa/Clevertec/gradleTask/Cash%20register/src/main/java/ru/clevertec/check/runner/streamIO/files/CheckFile.CSV"
    target = new File('logs.files.CheckFile.CSV')
}
build.dependsOn download
